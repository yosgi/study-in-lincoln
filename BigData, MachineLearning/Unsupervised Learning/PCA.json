{
    "nbformat": 4,
    "nbformat_minor": 0,
    "metadata": {
      "colab": {
        "provenance": [],
        "collapsed_sections": [
          "5tgmqNDnCnra",
          "-C3E5bbeCiNA",
          "W9iZfcmQAkZb",
          "XTxUEiDfAbSc",
          "e6woPBXkESL2"
        ]
      },
      "kernelspec": {
        "name": "python3",
        "display_name": "Python 3"
      },
      "language_info": {
        "name": "python"
      }
    },
    "cells": [
      {
        "cell_type": "markdown",
        "source": [
          "# Principal component analysis (PCA) in Dimensionality Reduction\n",
          "\n",
          "---\n",
          "\n"
        ],
        "metadata": {
          "id": "SR3_j_y-6-HQ"
        }
      },
      {
        "cell_type": "markdown",
        "source": [
          "https://scikit-learn.org/stable/modules/decomposition.html#principal-component-analysis-pca\n",
          "\n",
          "---"
        ],
        "metadata": {
          "id": "0Bn9_DRs8qbE"
        }
      },
      {
        "cell_type": "markdown",
        "source": [
          "##Install and Data Preparation"
        ],
        "metadata": {
          "id": "5tgmqNDnCnra"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "# Install required libraries\n",
          "!pip install yfinance\n",
          "!pip install matplotlib\n",
          "!pip install seaborn\n",
          "\n",
          "# Import libraries\n",
          "import yfinance as yf\n",
          "import pandas as pd\n",
          "import numpy as np\n",
          "from sklearn.preprocessing import StandardScaler\n",
          "from sklearn.decomposition import PCA\n",
          "import matplotlib.pyplot as plt\n",
          "import seaborn as sns\n"
        ],
        "metadata": {
          "id": "xTCvDec5R-wP"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Define stock tickers and date range\n",
          "tickers = ['A', 'M', 'T', 'K', 'G']\n",
          "start_date = '2020-01-01'\n",
          "end_date = '2024-08-15'\n",
          "\n",
          "# Download data from Yahoo Finance\n",
          "stock_data = yf.download(tickers, start=start_date, end=end_date)['Adj Close']\n",
          "\n",
          "# Display the first few rows of the data\n",
          "stock_data.head()\n"
        ],
        "metadata": {
          "id": "WJsqXL37SDJl"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "markdown",
        "source": [
          "##Fitting data"
        ],
        "metadata": {
          "id": "-C3E5bbeCiNA"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "# Handle missing values by filling forward\n",
          "stock_data = stock_data.fillna(method='ffill')\n",
          "\n",
          "# Standardize the data\n",
          "scaler = StandardScaler()\n",
          "scaled_data = scaler.fit_transform(stock_data)\n",
          "\n",
          "# Convert the scaled data back to a DataFrame\n",
          "scaled_data = pd.DataFrame(scaled_data, columns=stock_data.columns, index=stock_data.index)\n",
          "\n",
          "# Display scaled data\n",
          "scaled_data.head()\n"
        ],
        "metadata": {
          "id": "hYauQmzdSFEB"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Apply PCA\n",
          "pca = PCA(n_components=X)\n",
          "pca_result = pca.fit_transform(scaled_data)\n",
          "\n",
          "# Create a DataFrame for the PCA results\n",
          "pca_df = pd.DataFrame(pca_result, columns=['PC1', 'PC2', 'PC3'], index=stock_data.index)\n",
          "\n",
          "# Display the explained variance ratio\n",
          "explained_variance = pca.explained_variance_ratio_\n",
          "print(f'Explained variance by each component: {explained_variance}')\n"
        ],
        "metadata": {
          "id": "B-D6xmnKSIBT"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Apply PCA\n",
          "pca = PCA(n_components=X)\n",
          "pca_result = pca.fit_transform(scaled_data)\n",
          "\n",
          "# Create a DataFrame for the PCA results\n",
          "pca_df = pd.DataFrame(pca_result, columns=['PC1', 'PC2'], index=stock_data.index)\n",
          "\n",
          "# Display the explained variance ratio\n",
          "explained_variance = pca.explained_variance_ratio_\n",
          "print(f'Explained variance by each component: {explained_variance}')\n"
        ],
        "metadata": {
          "id": "ChejkAUn89zt"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Plot the PCA results\n",
          "plt.figure(figsize=(10, 6))\n",
          "plt.scatter(pca_df['PC1'], pca_df['PC2'], alpha=0.7, c=pca_df.index.dayofyear, cmap='coolwarm')\n",
          "plt.colorbar(label='Day of Year')\n",
          "plt.title('Stocks Data after PCA')\n",
          "plt.xlabel('Principal Component 1')\n",
          "plt.ylabel('Principal Component 2')\n",
          "plt.show()\n"
        ],
        "metadata": {
          "id": "hd5ScaOoSJ8W"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "markdown",
        "source": [],
        "metadata": {
          "id": "sq6s00fSTOcZ"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "# Plot the explained variance ratio\n",
          "plt.figure(figsize=(8, 6))\n",
          "plt.bar(range(1, 3), explained_variance, color='blue', alpha=0.7)\n",
          "plt.title('Explained Variance by Principal Components')\n",
          "plt.xlabel('Principal Components')\n",
          "plt.ylabel('Explained Variance Ratio')\n",
          "plt.show()\n"
        ],
        "metadata": {
          "id": "g-O_bczlSTfq"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "markdown",
        "source": [
          "##Portfolio Construction with PC1"
        ],
        "metadata": {
          "id": "W9iZfcmQAkZb"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "# Get the PCA components (loadings)\n",
          "loadings = pca.components_\n",
          "\n",
          "# Assign portfolio weights based on the first principal component\n",
          "portfolio_weights_pc1 = loadings[0] / sum(loadings[0])\n",
          "\n",
          "# Create a portfolio based on the first principal component\n",
          "portfolio_pc1 = (scaled_data * portfolio_weights_pc1).sum(axis=1)\n",
          "\n",
          "# Show portfolio weights based on the first principal component\n",
          "print(\"Portfolio Weights (PC1-based):\")\n",
          "for ticker, weight in zip(stock_data.columns, portfolio_weights_pc1):\n",
          "    print(f'{ticker}: {weight:.4f}')\n"
        ],
        "metadata": {
          "id": "3YNo_X-vT8iA"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Plot portfolio_pc1\n",
          "plt.figure(figsize=(12, 6))\n",
          "plt.plot(portfolio_pc1, label='PCA-Based Portfolio (PC1)', color='blue')\n",
          "plt.title('PCA-Based Portfolio (PC1)')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Portfolio Value')\n",
          "plt.legend()\n",
          "plt.show()"
        ],
        "metadata": {
          "id": "-5OtUsUE-r5w"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Calculate daily returns for the stock data\n",
          "stock_returns = stock_data.pct_change().dropna()\n",
          "portfolio_pc1_returns = (stock_returns * portfolio_weights_pc1).sum(axis=1)\n",
          "# Calculate cumulative returns of the PC1-based portfolio\n",
          "cumulative_returns = (1 + portfolio_pc1_returns).cumprod() - 1\n",
          "\n",
          "# Plot the cumulative returns\n",
          "plt.figure(figsize=(12, 6))\n",
          "plt.plot(cumulative_returns, label='PCA-Based Portfolio Cumulative Returns (PC1)', color='blue')\n",
          "plt.title('PCA-Based Portfolio Cumulative Returns (PC1)')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Cumulative Returns')\n",
          "plt.legend()\n",
          "plt.show()"
        ],
        "metadata": {
          "id": "9zRbtIxm9icD"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Create an equal-weighted portfolio\n",
          "equal_weights = np.ones(len(tickers)) / len(tickers)\n",
          "equal_weighted_portfolio = (scaled_data * equal_weights).sum(axis=1)\n",
          "\n",
          "# Plot PCA-based portfolio vs Equal-weighted portfolio\n",
          "import matplotlib.pyplot as plt\n",
          "\n",
          "plt.figure(figsize=(12, 6))\n",
          "plt.plot(stock_data.index, portfolio_pc1, label='PCA-Based Portfolio (PC1)', color='blue')\n",
          "plt.plot(stock_data.index, equal_weighted_portfolio, label='Equal-Weighted Portfolio', color='green')\n",
          "plt.title('PCA-Based Portfolio vs Equal-Weighted Portfolio')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Portfolio Return')\n",
          "plt.legend()\n",
          "plt.show()\n"
        ],
        "metadata": {
          "id": "F_tfqQQ-T-XA"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Final cumulative returns for portfolio\n",
          "stock_returns = stock_data.pct_change().dropna()\n",
          "pca_portfolio_returns = (stock_returns * portfolio_weights_pc1).sum(axis=1)\n",
          "pca_cumulative_returns = (1 + pca_portfolio_returns).cumprod()\n",
          "print(f'Final Cumulative Return (PCA-Based Portfolio): {pca_cumulative_returns.iloc[-1]:.4f}')\n",
          "\n",
          "equal_weighted_returns = (stock_returns * equal_weights).sum(axis=1)\n",
          "equal_weighted_cumulative_returns = (1 + equal_weighted_returns).cumprod()\n",
          "print(f'Final Cumulative Return (Equal-Weighted Portfolio): {equal_weighted_cumulative_returns.iloc[-1]:.4f}')"
        ],
        "metadata": {
          "id": "JQe99B8z8LMD"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "markdown",
        "source": [
          "##Portfolio Construction with PC1 and PC2"
        ],
        "metadata": {
          "id": "XTxUEiDfAbSc"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "# Get PCA components (loadings for PC1 and PC2)\n",
          "loadings_pc1 = pca.components_[0]\n",
          "loadings_pc2 = pca.components_[1]\n",
          "\n",
          "# Normalize weights for PC1 and PC2\n",
          "portfolio_weights_pc1 = loadings_pc1 / np.sum(np.abs(loadings_pc1))\n",
          "portfolio_weights_pc2 = loadings_pc2 / np.sum(np.abs(loadings_pc2))\n",
          "\n",
          "# Combine the two principal components with equal weighting (50% PC1 and 50% PC2)\n",
          "combined_weights = 0.5 * portfolio_weights_pc1 + 0.5 * portfolio_weights_pc2\n",
          "\n",
          "# Show combined portfolio weights\n",
          "print(\"Combined Portfolio Weights (PC1 and PC2):\")\n",
          "for ticker, weight in zip(stock_data.columns, combined_weights):\n",
          "    print(f'{ticker}: {weight:.4f}')\n"
        ],
        "metadata": {
          "id": "z5Go3xSUlIdY"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Create a portfolio based on the combined principal components (PC1 and PC2)\n",
          "portfolio_pc1_pc2 = (scaled_data * combined_weights).sum(axis=1)\n",
          "\n",
          "# Plot the portfolio returns\n",
          "plt.figure(figsize=(12, 6))\n",
          "plt.plot(stock_data.index, portfolio_pc1_pc2, label='PCA-Based Portfolio (PC1 + PC2)', color='blue')\n",
          "plt.title('PCA-Based Portfolio (PC1 + PC2)')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Portfolio Return')\n",
          "plt.legend()\n",
          "plt.show()\n"
        ],
        "metadata": {
          "id": "6SJ6CA3ilZCo"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Equal-weighted portfolio for comparison\n",
          "equal_weights = np.ones(len(tickers)) / len(tickers)\n",
          "equal_weighted_portfolio = (scaled_data * equal_weights).sum(axis=1)\n",
          "\n",
          "# Plot PCA-based portfolio vs equal-weighted portfolio\n",
          "plt.figure(figsize=(12, 6))\n",
          "plt.plot(stock_data.index, portfolio_pc1_pc2, label='PCA-Based Portfolio (PC1 + PC2)', color='blue')\n",
          "plt.plot(stock_data.index, equal_weighted_portfolio, label='Equal-Weighted Portfolio', color='green')\n",
          "plt.title('PCA-Based Portfolio vs Equal-Weighted Portfolio')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Portfolio Return')\n",
          "plt.legend()\n",
          "plt.show()\n"
        ],
        "metadata": {
          "id": "WUfV2cK9lg17"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "markdown",
        "source": [],
        "metadata": {
          "id": "cN6Jra97BumC"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "import cvxpy as cp\n",
          "\n",
          "# Define optimization variables\n",
          "n_assets = len(tickers)\n",
          "weights = cp.Variable(n_assets)\n",
          "\n",
          "# Portfolio variance (covariance matrix of stock returns)\n",
          "cov_matrix = np.cov(scaled_data.T)\n",
          "portfolio_variance = cp.quad_form(weights, cov_matrix)\n",
          "\n",
          "# Constraints: sum of weights = 1 and non-negative weights\n",
          "constraints = [cp.sum(weights) == 1, weights >= 0]\n",
          "\n",
          "# Minimize portfolio variance\n",
          "objective = cp.Minimize(portfolio_variance)\n",
          "problem = cp.Problem(objective, constraints)\n",
          "problem.solve()\n",
          "\n",
          "# Optimal portfolio weights\n",
          "optimal_weights = weights.value\n",
          "\n",
          "# Display optimal weights\n",
          "print(\"Optimal Portfolio Weights (PC1 + PC2):\")\n",
          "for ticker, weight in zip(stock_data.columns, optimal_weights):\n",
          "    print(f'{ticker}: {weight:.4f}')\n"
        ],
        "metadata": {
          "id": "b5uB2kF6lk3G"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Create optimized portfolio based on optimal weights\n",
          "optimized_portfolio_pc1_pc2 = (scaled_data * optimal_weights).sum(axis=1)\n",
          "\n",
          "# Plot PCA-based portfolio vs Optimized portfolio\n",
          "plt.figure(figsize=(12, 6))\n",
          "plt.plot(stock_data.index, portfolio_pc1_pc2, label='PCA-Based Portfolio (PC1 + PC2)', color='blue')\n",
          "plt.plot(stock_data.index, optimized_portfolio_pc1_pc2, label='Optimized Portfolio (PC1 + PC2)', color='red')\n",
          "plt.title('PCA-Based Portfolio vs Optimized Portfolio (PC1 + PC2)')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Portfolio Return')\n",
          "plt.legend()\n",
          "plt.show()\n"
        ],
        "metadata": {
          "id": "vejix9imlsi0"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Calculate the returns for portfolio\n",
          "stock_returns = stock_data.pct_change().dropna()\n",
          "portfolio_pc1_pc2 = (scaled_data * combined_weights).sum(axis=1)\n",
          "pc1_pc2_cumulative_returns = (1 + portfolio_pc1_pc2).cumprod()\n",
          "print(f'Final Cumulative Return (PC1-2-Based Portfolio): {pc1_pc2_cumulative_returns.iloc[-1]:.4f}')"
        ],
        "metadata": {
          "id": "2kzV4r30dJB6"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Calculate the returns for portfolio\n",
          "optimized_portfolio_returns = (stock_returns * optimal_weights).sum(axis=1)\n",
          "# Calculate cumulative returns for portfolio\n",
          "optimized_cumulative_returns = (1 + optimized_portfolio_returns).cumprod()\n",
          "print(f'Optimized Cumulative Return (Optimiztion-Based Portfolio): {optimized_cumulative_returns.iloc[-1]:.4f}')"
        ],
        "metadata": {
          "id": "L1y-mBjeYT0i"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "markdown",
        "source": [
          "#Machine Learning"
        ],
        "metadata": {
          "id": "e6woPBXkESL2"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "import yfinance as yf\n",
          "import pandas as pd\n",
          "import numpy as np\n",
          "from sklearn.preprocessing import StandardScaler\n",
          "from sklearn.decomposition import PCA\n",
          "from sklearn.model_selection import train_test_split\n",
          "from sklearn.linear_model import LinearRegression\n",
          "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
          "import matplotlib.pyplot as plt\n",
          "\n",
          "# Define stock tickers and date range\n",
          "tickers = ['A', 'M', 'T', 'K', 'G']\n",
          "start_date = '2020-01-01'\n",
          "end_date = '2024-08-15'\n",
          "\n",
          "# Download data from Yahoo Finance\n",
          "stock_data = yf.download(tickers, start=start_date, end=end_date)['Adj Close']\n",
          "stock_data = stock_data.fillna(method='ffill')\n",
          "\n",
          "# Standardize the data\n",
          "scaler = StandardScaler()\n",
          "scaled_data = scaler.fit_transform(stock_data)\n",
          "scaled_data = pd.DataFrame(scaled_data, columns=stock_data.columns, index=stock_data.index)\n",
          "\n",
          "# Apply PCA\n",
          "pca = PCA(n_components=2)\n",
          "pca_result = pca.fit_transform(scaled_data)\n",
          "pca_df = pd.DataFrame(pca_result, columns=['PC1', 'PC2'], index=stock_data.index)\n",
          "\n",
          "# Assign portfolio weights based on the first principal component\n",
          "loadings = pca.components_\n",
          "portfolio_weights_pc1 = loadings[0] / sum(loadings[0])\n",
          "portfolio_pc1 = (scaled_data * portfolio_weights_pc1).sum(axis=1)\n",
          "\n",
          "# Calculate daily returns\n",
          "portfolio_returns = portfolio_pc1.pct_change().dropna()\n",
          "features_df = pd.DataFrame(index=portfolio_returns.index)\n",
          "features_df['Return'] = portfolio_returns\n",
          "\n",
          "# Create lagged features\n",
          "for lag in range(1, 21):\n",
          "    features_df[f'Lag_{lag}'] = features_df['Return'].shift(lag)\n",
          "features_df = features_df.dropna()\n",
          "\n",
          "# Define target variable\n",
          "features_df['Target'] = features_df['Return'].shift(-30)\n",
          "features_df = features_df.dropna()\n",
          "X = features_df.drop(columns=['Target'])\n",
          "y = features_df['Target']\n",
          "\n",
          "# Split the data\n",
          "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
          "\n",
          "# Train the model\n",
          "model = LinearRegression()\n",
          "model.fit(X_train, y_train)\n",
          "\n",
          "# Make predictions on test set\n",
          "y_pred = model.predict(X_test)\n",
          "mae = mean_absolute_error(y_test, y_pred)\n",
          "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
          "\n",
          "print(f'Mean Absolute Error: {mae:.4f}')\n",
          "print(f'Root Mean Squared Error: {rmse:.4f}')\n",
          "\n",
          "# Predict 30 days ahead\n",
          "# Get the latest data for prediction\n",
          "latest_features = X.iloc[-1:].values\n",
          "\n",
          "# Generate predictions for the next 30 days\n",
          "future_dates = pd.date_range(start=stock_data.index[-1] + pd.Timedelta(days=1), periods=30)\n",
          "future_predictions = []\n",
          "\n",
          "for _ in range(30):\n",
          "    pred = model.predict(latest_features)\n",
          "    future_predictions.append(pred[0])\n",
          "    # Update latest_features with the new prediction\n",
          "    latest_features = np.roll(latest_features, shift=-1, axis=1)\n",
          "    latest_features[0, -1] = pred[0]\n",
          "\n",
          "# Create DataFrame for future predictions\n",
          "predictions_df = pd.DataFrame({\n",
          "    'Date': future_dates,\n",
          "    'Predicted Return': future_predictions\n",
          "})\n",
          "\n",
          "# Plot the predicted 30-day returns\n",
          "plt.figure(figsize=(14, 7))\n",
          "plt.plot(predictions_df['Date'], predictions_df['Predicted Return'], label='Predicted 30-Day Returns', color='orange', linestyle='--')\n",
          "plt.title('Predicted 30-Day Ahead Returns')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Returns')\n",
          "plt.legend()\n",
          "plt.grid(True)\n",
          "plt.show()\n"
        ],
        "metadata": {
          "id": "TWB0x3TXFbyB"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Ridge Regression\n",
          "ridge_model = Ridge(alpha=1.0)\n",
          "ridge_model.fit(X_train, y_train)\n",
          "y_pred_ridge = ridge_model.predict(X_test)\n",
          "mae_ridge = mean_absolute_error(y_test, y_pred_ridge)\n",
          "rmse_ridge = np.sqrt(mean_squared_error(y_test, y_pred_ridge))\n",
          "\n",
          "print(f'Ridge Regression - Mean Absolute Error: {mae_ridge:.4f}')\n",
          "print(f'Ridge Regression - Root Mean Squared Error: {rmse_ridge:.4f}')"
        ],
        "metadata": {
          "id": "_nJ6Udm_ifhy"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Predict 30 days ahead with Ridge Regression\n",
          "latest_features = X.iloc[-1:].values\n",
          "future_dates = pd.date_range(start=stock_data.index[-1] + pd.Timedelta(days=1), periods=30)\n",
          "future_predictions_ridge = []\n",
          "\n",
          "for _ in range(30):\n",
          "    pred = ridge_model.predict(latest_features)\n",
          "    future_predictions_ridge.append(pred[0])\n",
          "    latest_features = np.roll(latest_features, shift=-1, axis=1)\n",
          "    latest_features[0, -1] = pred[0]\n",
          "\n",
          "# Create DataFrame for future predictions\n",
          "future_predictions_df_ridge = pd.DataFrame({\n",
          "    'Date': future_dates,\n",
          "    'Predicted Return': future_predictions_ridge\n",
          "})\n",
          "\n",
          "# Plot the predicted 30-day returns\n",
          "plt.figure(figsize=(14, 7))\n",
          "plt.plot(future_predictions_df_ridge['Date'], future_predictions_df_ridge['Predicted Return'], label='Predicted 30-Day Returns (Ridge)', color='orange', linestyle='--')\n",
          "plt.title('Predicted 30-Day Ahead Returns (Ridge Regression)')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Returns')\n",
          "plt.legend()\n",
          "plt.grid(True)\n",
          "plt.show()"
        ],
        "metadata": {
          "id": "uFIId6AdIps0"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "# Merge predictions DataFrames\n",
          "combined_df = pd.merge(future_predictions_df_ridge, predictions_df, on='Date', suffixes=('_Ridge', '_LinearRegression'))\n",
          "\n",
          "# Plot the comparison\n",
          "plt.figure(figsize=(14, 7))\n",
          "plt.plot(combined_df['Date'], combined_df['Predicted Return_Ridge'], label='Ridge Regression - Predicted Returns', color='blue', linestyle='--')\n",
          "plt.plot(combined_df['Date'], combined_df['Predicted Return_LinearRegression'], label='Linear Regression - Predicted Returns', color='green', linestyle='--')\n",
          "plt.title('30-Day Ahead Returns Predictions Comparison')\n",
          "plt.xlabel('Date')\n",
          "plt.ylabel('Returns')\n",
          "plt.legend()\n",
          "plt.grid(True)\n",
          "plt.show()"
        ],
        "metadata": {
          "id": "0dSf5w9wJoXc"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "combined_df"
        ],
        "metadata": {
          "id": "8uAMnTPxJ9vw"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "markdown",
        "source": [
          "#END"
        ],
        "metadata": {
          "id": "oY4naJohCUEE"
        }
      }
    ]
  }