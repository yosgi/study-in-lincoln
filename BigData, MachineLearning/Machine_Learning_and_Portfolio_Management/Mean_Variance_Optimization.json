{
    "nbformat": 4,
    "nbformat_minor": 0,
    "metadata": {
      "colab": {
        "provenance": []
      },
      "kernelspec": {
        "name": "python3",
        "display_name": "Python 3"
      },
      "language_info": {
        "name": "python"
      }
    },
    "cells": [
      {
        "cell_type": "code",
        "source": [
          "!pip install yfinance pandas numpy seaborn matplotlib PyPortfolioOpt\n",
          "import os"
        ],
        "metadata": {
          "id": "bYMgJac_q56m",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "2467976b-225f-4f66-9726-b94287c1cf72"
        },
        "execution_count": 1,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Requirement already satisfied: yfinance in /usr/local/lib/python3.10/dist-packages (0.2.41)\n",
              "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\n",
              "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.26.4)\n",
              "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n",
              "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
              "Collecting PyPortfolioOpt\n",
              "  Downloading pyportfolioopt-1.5.5-py3-none-any.whl.metadata (23 kB)\n",
              "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.32.3)\n",
              "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.10/dist-packages (from yfinance) (0.0.11)\n",
              "Requirement already satisfied: lxml>=4.9.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.9.4)\n",
              "Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.2.2)\n",
              "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2024.1)\n",
              "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.10/dist-packages (from yfinance) (2.4.4)\n",
              "Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.10/dist-packages (from yfinance) (3.17.6)\n",
              "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (4.12.3)\n",
              "Requirement already satisfied: html5lib>=1.1 in /usr/local/lib/python3.10/dist-packages (from yfinance) (1.1)\n",
              "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
              "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
              "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n",
              "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
              "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.53.1)\n",
              "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
              "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n",
              "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
              "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
              "Requirement already satisfied: cvxpy<2.0.0,>=1.1.19 in /usr/local/lib/python3.10/dist-packages (from PyPortfolioOpt) (1.5.2)\n",
              "Requirement already satisfied: scipy<2.0,>=1.3 in /usr/local/lib/python3.10/dist-packages (from PyPortfolioOpt) (1.13.1)\n",
              "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\n",
              "Requirement already satisfied: osqp>=0.6.2 in /usr/local/lib/python3.10/dist-packages (from cvxpy<2.0.0,>=1.1.19->PyPortfolioOpt) (0.6.7.post0)\n",
              "Requirement already satisfied: ecos>=2 in /usr/local/lib/python3.10/dist-packages (from cvxpy<2.0.0,>=1.1.19->PyPortfolioOpt) (2.0.14)\n",
              "Requirement already satisfied: clarabel>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from cvxpy<2.0.0,>=1.1.19->PyPortfolioOpt) (0.9.0)\n",
              "Requirement already satisfied: scs>=3.2.4.post1 in /usr/local/lib/python3.10/dist-packages (from cvxpy<2.0.0,>=1.1.19->PyPortfolioOpt) (3.2.6)\n",
              "Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (1.16.0)\n",
              "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from html5lib>=1.1->yfinance) (0.5.1)\n",
              "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (3.3.2)\n",
              "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (3.7)\n",
              "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (2.0.7)\n",
              "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31->yfinance) (2024.7.4)\n",
              "Requirement already satisfied: qdldl in /usr/local/lib/python3.10/dist-packages (from osqp>=0.6.2->cvxpy<2.0.0,>=1.1.19->PyPortfolioOpt) (0.1.7.post4)\n",
              "Downloading pyportfolioopt-1.5.5-py3-none-any.whl (61 kB)\n",
              "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.9/61.9 kB\u001b[0m \u001b[31m1.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
              "\u001b[?25hInstalling collected packages: PyPortfolioOpt\n",
              "Successfully installed PyPortfolioOpt-1.5.5\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "import yfinance as yf\n",
          "import pandas as pd\n",
          "import numpy as np\n",
          "import seaborn as sns\n",
          "import matplotlib.pyplot as plt"
        ],
        "metadata": {
          "id": "0BbqG9amsPNw"
        },
        "execution_count": 2,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "tickers = [\"MSFT\", \"SIRI\"] # Can be more"
        ],
        "metadata": {
          "id": "iDZRYUpdtlRj"
        },
        "execution_count": 3,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "ohlc = yf.download(tickers, period=\"max\")\n"
        ],
        "metadata": {
          "id": "IAZnzmjcuIfk",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "1b833a21-0fb3-4bf3-8e50-c2f251792fa2"
        },
        "execution_count": 4,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stderr",
            "text": [
              "\r[                       0%%                      ]\r[*********************100%%**********************]  2 of 2 completed\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "prices = ohlc[\"Adj Close\"].dropna(how=\"all\")\n"
        ],
        "metadata": {
          "id": "9zeDGXaeuVJu"
        },
        "execution_count": 5,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "prices.tail()"
        ],
        "metadata": {
          "id": "wPeMiZTvu0ou",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 246
          },
          "outputId": "aa154d85-194a-4fd8-992e-1206dd8c6442"
        },
        "execution_count": 6,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "Ticker            MSFT      SIRI\n",
                "Date                            \n",
                "2024-08-07  398.429993  3.083427\n",
                "2024-08-08  402.690002  3.133000\n",
                "2024-08-09  406.019989  3.140000\n",
                "2024-08-12  406.809998  2.980000\n",
                "2024-08-13  414.010010  3.000000"
              ],
              "text/html": [
                "\n",
                "  <div id=\"df-427c6ff1-7b89-4e28-811d-cdbdc3ed07d9\" class=\"colab-df-container\">\n",
                "    <div>\n",
                "<style scoped>\n",
                "    .dataframe tbody tr th:only-of-type {\n",
                "        vertical-align: middle;\n",
                "    }\n",
                "\n",
                "    .dataframe tbody tr th {\n",
                "        vertical-align: top;\n",
                "    }\n",
                "\n",
                "    .dataframe thead th {\n",
                "        text-align: right;\n",
                "    }\n",
                "</style>\n",
                "<table border=\"1\" class=\"dataframe\">\n",
                "  <thead>\n",
                "    <tr style=\"text-align: right;\">\n",
                "      <th>Ticker</th>\n",
                "      <th>MSFT</th>\n",
                "      <th>SIRI</th>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>Date</th>\n",
                "      <th></th>\n",
                "      <th></th>\n",
                "    </tr>\n",
                "  </thead>\n",
                "  <tbody>\n",
                "    <tr>\n",
                "      <th>2024-08-07</th>\n",
                "      <td>398.429993</td>\n",
                "      <td>3.083427</td>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>2024-08-08</th>\n",
                "      <td>402.690002</td>\n",
                "      <td>3.133000</td>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>2024-08-09</th>\n",
                "      <td>406.019989</td>\n",
                "      <td>3.140000</td>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>2024-08-12</th>\n",
                "      <td>406.809998</td>\n",
                "      <td>2.980000</td>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>2024-08-13</th>\n",
                "      <td>414.010010</td>\n",
                "      <td>3.000000</td>\n",
                "    </tr>\n",
                "  </tbody>\n",
                "</table>\n",
                "</div>\n",
                "    <div class=\"colab-df-buttons\">\n",
                "\n",
                "  <div class=\"colab-df-container\">\n",
                "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-427c6ff1-7b89-4e28-811d-cdbdc3ed07d9')\"\n",
                "            title=\"Convert this dataframe to an interactive table.\"\n",
                "            style=\"display:none;\">\n",
                "\n",
                "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
                "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
                "  </svg>\n",
                "    </button>\n",
                "\n",
                "  <style>\n",
                "    .colab-df-container {\n",
                "      display:flex;\n",
                "      gap: 12px;\n",
                "    }\n",
                "\n",
                "    .colab-df-convert {\n",
                "      background-color: #E8F0FE;\n",
                "      border: none;\n",
                "      border-radius: 50%;\n",
                "      cursor: pointer;\n",
                "      display: none;\n",
                "      fill: #1967D2;\n",
                "      height: 32px;\n",
                "      padding: 0 0 0 0;\n",
                "      width: 32px;\n",
                "    }\n",
                "\n",
                "    .colab-df-convert:hover {\n",
                "      background-color: #E2EBFA;\n",
                "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
                "      fill: #174EA6;\n",
                "    }\n",
                "\n",
                "    .colab-df-buttons div {\n",
                "      margin-bottom: 4px;\n",
                "    }\n",
                "\n",
                "    [theme=dark] .colab-df-convert {\n",
                "      background-color: #3B4455;\n",
                "      fill: #D2E3FC;\n",
                "    }\n",
                "\n",
                "    [theme=dark] .colab-df-convert:hover {\n",
                "      background-color: #434B5C;\n",
                "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
                "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
                "      fill: #FFFFFF;\n",
                "    }\n",
                "  </style>\n",
                "\n",
                "    <script>\n",
                "      const buttonEl =\n",
                "        document.querySelector('#df-427c6ff1-7b89-4e28-811d-cdbdc3ed07d9 button.colab-df-convert');\n",
                "      buttonEl.style.display =\n",
                "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
                "\n",
                "      async function convertToInteractive(key) {\n",
                "        const element = document.querySelector('#df-427c6ff1-7b89-4e28-811d-cdbdc3ed07d9');\n",
                "        const dataTable =\n",
                "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
                "                                                    [key], {});\n",
                "        if (!dataTable) return;\n",
                "\n",
                "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
                "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
                "          + ' to learn more about interactive tables.';\n",
                "        element.innerHTML = '';\n",
                "        dataTable['output_type'] = 'display_data';\n",
                "        await google.colab.output.renderOutput(dataTable, element);\n",
                "        const docLink = document.createElement('div');\n",
                "        docLink.innerHTML = docLinkHtml;\n",
                "        element.appendChild(docLink);\n",
                "      }\n",
                "    </script>\n",
                "  </div>\n",
                "\n",
                "\n",
                "<div id=\"df-8086e4ed-03c4-4461-ad68-4ab016875f2a\">\n",
                "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8086e4ed-03c4-4461-ad68-4ab016875f2a')\"\n",
                "            title=\"Suggest charts\"\n",
                "            style=\"display:none;\">\n",
                "\n",
                "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
                "     width=\"24px\">\n",
                "    <g>\n",
                "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
                "    </g>\n",
                "</svg>\n",
                "  </button>\n",
                "\n",
                "<style>\n",
                "  .colab-df-quickchart {\n",
                "      --bg-color: #E8F0FE;\n",
                "      --fill-color: #1967D2;\n",
                "      --hover-bg-color: #E2EBFA;\n",
                "      --hover-fill-color: #174EA6;\n",
                "      --disabled-fill-color: #AAA;\n",
                "      --disabled-bg-color: #DDD;\n",
                "  }\n",
                "\n",
                "  [theme=dark] .colab-df-quickchart {\n",
                "      --bg-color: #3B4455;\n",
                "      --fill-color: #D2E3FC;\n",
                "      --hover-bg-color: #434B5C;\n",
                "      --hover-fill-color: #FFFFFF;\n",
                "      --disabled-bg-color: #3B4455;\n",
                "      --disabled-fill-color: #666;\n",
                "  }\n",
                "\n",
                "  .colab-df-quickchart {\n",
                "    background-color: var(--bg-color);\n",
                "    border: none;\n",
                "    border-radius: 50%;\n",
                "    cursor: pointer;\n",
                "    display: none;\n",
                "    fill: var(--fill-color);\n",
                "    height: 32px;\n",
                "    padding: 0;\n",
                "    width: 32px;\n",
                "  }\n",
                "\n",
                "  .colab-df-quickchart:hover {\n",
                "    background-color: var(--hover-bg-color);\n",
                "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
                "    fill: var(--button-hover-fill-color);\n",
                "  }\n",
                "\n",
                "  .colab-df-quickchart-complete:disabled,\n",
                "  .colab-df-quickchart-complete:disabled:hover {\n",
                "    background-color: var(--disabled-bg-color);\n",
                "    fill: var(--disabled-fill-color);\n",
                "    box-shadow: none;\n",
                "  }\n",
                "\n",
                "  .colab-df-spinner {\n",
                "    border: 2px solid var(--fill-color);\n",
                "    border-color: transparent;\n",
                "    border-bottom-color: var(--fill-color);\n",
                "    animation:\n",
                "      spin 1s steps(1) infinite;\n",
                "  }\n",
                "\n",
                "  @keyframes spin {\n",
                "    0% {\n",
                "      border-color: transparent;\n",
                "      border-bottom-color: var(--fill-color);\n",
                "      border-left-color: var(--fill-color);\n",
                "    }\n",
                "    20% {\n",
                "      border-color: transparent;\n",
                "      border-left-color: var(--fill-color);\n",
                "      border-top-color: var(--fill-color);\n",
                "    }\n",
                "    30% {\n",
                "      border-color: transparent;\n",
                "      border-left-color: var(--fill-color);\n",
                "      border-top-color: var(--fill-color);\n",
                "      border-right-color: var(--fill-color);\n",
                "    }\n",
                "    40% {\n",
                "      border-color: transparent;\n",
                "      border-right-color: var(--fill-color);\n",
                "      border-top-color: var(--fill-color);\n",
                "    }\n",
                "    60% {\n",
                "      border-color: transparent;\n",
                "      border-right-color: var(--fill-color);\n",
                "    }\n",
                "    80% {\n",
                "      border-color: transparent;\n",
                "      border-right-color: var(--fill-color);\n",
                "      border-bottom-color: var(--fill-color);\n",
                "    }\n",
                "    90% {\n",
                "      border-color: transparent;\n",
                "      border-bottom-color: var(--fill-color);\n",
                "    }\n",
                "  }\n",
                "</style>\n",
                "\n",
                "  <script>\n",
                "    async function quickchart(key) {\n",
                "      const quickchartButtonEl =\n",
                "        document.querySelector('#' + key + ' button');\n",
                "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
                "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
                "      try {\n",
                "        const charts = await google.colab.kernel.invokeFunction(\n",
                "            'suggestCharts', [key], {});\n",
                "      } catch (error) {\n",
                "        console.error('Error during call to suggestCharts:', error);\n",
                "      }\n",
                "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
                "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
                "    }\n",
                "    (() => {\n",
                "      let quickchartButtonEl =\n",
                "        document.querySelector('#df-8086e4ed-03c4-4461-ad68-4ab016875f2a button');\n",
                "      quickchartButtonEl.style.display =\n",
                "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
                "    })();\n",
                "  </script>\n",
                "</div>\n",
                "\n",
                "    </div>\n",
                "  </div>\n"
              ],
              "application/vnd.google.colaboratory.intrinsic+json": {
                "type": "dataframe",
                "summary": "{\n  \"name\": \"prices\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-08-07 00:00:00\",\n        \"max\": \"2024-08-13 00:00:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2024-08-08 00:00:00\",\n          \"2024-08-13 00:00:00\",\n          \"2024-08-09 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MSFT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.74990260363066,\n        \"min\": 398.42999267578125,\n        \"max\": 414.010009765625,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          402.69000244140625,\n          414.010009765625,\n          406.0199890136719\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SIRI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07418294264011263,\n        \"min\": 2.9800000190734863,\n        \"max\": 3.140000104904175,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.132999897003174,\n          3.0,\n          3.140000104904175\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
              }
            },
            "metadata": {},
            "execution_count": 6
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "prices[prices.index >= \"2012-01-01\"].plot(figsize=(15, 10))"
        ],
        "metadata": {
          "id": "Z7vh8-QtvJDv",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 794
          },
          "outputId": "7d4d1e6b-97b9-4819-b7c9-e0dff66a74f4"
        },
        "execution_count": 7,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "<Axes: xlabel='Date'>"
              ]
            },
            "metadata": {},
            "execution_count": 7
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 1500x1000 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "import pypfopt"
        ],
        "metadata": {
          "id": "RTLSDIPhxEUa"
        },
        "execution_count": 8,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "from pypfopt import risk_models\n",
          "from pypfopt import plotting\n",
          "\n",
          "sample_cov = risk_models.sample_cov(prices, frequency=252)\n",
          "sample_cov"
        ],
        "metadata": {
          "id": "M9Edm2dCxiTj",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 143
          },
          "outputId": "7cd9fb9c-0141-45c6-efa1-ea275a2cd962"
        },
        "execution_count": 9,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "Ticker      MSFT      SIRI\n",
                "Ticker                    \n",
                "MSFT    0.112172  0.039453\n",
                "SIRI    0.039453  0.628279"
              ],
              "text/html": [
                "\n",
                "  <div id=\"df-1cc84aab-bbb2-4153-a633-d3d97d47a742\" class=\"colab-df-container\">\n",
                "    <div>\n",
                "<style scoped>\n",
                "    .dataframe tbody tr th:only-of-type {\n",
                "        vertical-align: middle;\n",
                "    }\n",
                "\n",
                "    .dataframe tbody tr th {\n",
                "        vertical-align: top;\n",
                "    }\n",
                "\n",
                "    .dataframe thead th {\n",
                "        text-align: right;\n",
                "    }\n",
                "</style>\n",
                "<table border=\"1\" class=\"dataframe\">\n",
                "  <thead>\n",
                "    <tr style=\"text-align: right;\">\n",
                "      <th>Ticker</th>\n",
                "      <th>MSFT</th>\n",
                "      <th>SIRI</th>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>Ticker</th>\n",
                "      <th></th>\n",
                "      <th></th>\n",
                "    </tr>\n",
                "  </thead>\n",
                "  <tbody>\n",
                "    <tr>\n",
                "      <th>MSFT</th>\n",
                "      <td>0.112172</td>\n",
                "      <td>0.039453</td>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>SIRI</th>\n",
                "      <td>0.039453</td>\n",
                "      <td>0.628279</td>\n",
                "    </tr>\n",
                "  </tbody>\n",
                "</table>\n",
                "</div>\n",
                "    <div class=\"colab-df-buttons\">\n",
                "\n",
                "  <div class=\"colab-df-container\">\n",
                "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1cc84aab-bbb2-4153-a633-d3d97d47a742')\"\n",
                "            title=\"Convert this dataframe to an interactive table.\"\n",
                "            style=\"display:none;\">\n",
                "\n",
                "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
                "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
                "  </svg>\n",
                "    </button>\n",
                "\n",
                "  <style>\n",
                "    .colab-df-container {\n",
                "      display:flex;\n",
                "      gap: 12px;\n",
                "    }\n",
                "\n",
                "    .colab-df-convert {\n",
                "      background-color: #E8F0FE;\n",
                "      border: none;\n",
                "      border-radius: 50%;\n",
                "      cursor: pointer;\n",
                "      display: none;\n",
                "      fill: #1967D2;\n",
                "      height: 32px;\n",
                "      padding: 0 0 0 0;\n",
                "      width: 32px;\n",
                "    }\n",
                "\n",
                "    .colab-df-convert:hover {\n",
                "      background-color: #E2EBFA;\n",
                "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
                "      fill: #174EA6;\n",
                "    }\n",
                "\n",
                "    .colab-df-buttons div {\n",
                "      margin-bottom: 4px;\n",
                "    }\n",
                "\n",
                "    [theme=dark] .colab-df-convert {\n",
                "      background-color: #3B4455;\n",
                "      fill: #D2E3FC;\n",
                "    }\n",
                "\n",
                "    [theme=dark] .colab-df-convert:hover {\n",
                "      background-color: #434B5C;\n",
                "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
                "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
                "      fill: #FFFFFF;\n",
                "    }\n",
                "  </style>\n",
                "\n",
                "    <script>\n",
                "      const buttonEl =\n",
                "        document.querySelector('#df-1cc84aab-bbb2-4153-a633-d3d97d47a742 button.colab-df-convert');\n",
                "      buttonEl.style.display =\n",
                "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
                "\n",
                "      async function convertToInteractive(key) {\n",
                "        const element = document.querySelector('#df-1cc84aab-bbb2-4153-a633-d3d97d47a742');\n",
                "        const dataTable =\n",
                "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
                "                                                    [key], {});\n",
                "        if (!dataTable) return;\n",
                "\n",
                "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
                "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
                "          + ' to learn more about interactive tables.';\n",
                "        element.innerHTML = '';\n",
                "        dataTable['output_type'] = 'display_data';\n",
                "        await google.colab.output.renderOutput(dataTable, element);\n",
                "        const docLink = document.createElement('div');\n",
                "        docLink.innerHTML = docLinkHtml;\n",
                "        element.appendChild(docLink);\n",
                "      }\n",
                "    </script>\n",
                "  </div>\n",
                "\n",
                "\n",
                "<div id=\"df-f65d83a3-c83a-4169-a7b6-90f264e4d890\">\n",
                "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f65d83a3-c83a-4169-a7b6-90f264e4d890')\"\n",
                "            title=\"Suggest charts\"\n",
                "            style=\"display:none;\">\n",
                "\n",
                "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
                "     width=\"24px\">\n",
                "    <g>\n",
                "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
                "    </g>\n",
                "</svg>\n",
                "  </button>\n",
                "\n",
                "<style>\n",
                "  .colab-df-quickchart {\n",
                "      --bg-color: #E8F0FE;\n",
                "      --fill-color: #1967D2;\n",
                "      --hover-bg-color: #E2EBFA;\n",
                "      --hover-fill-color: #174EA6;\n",
                "      --disabled-fill-color: #AAA;\n",
                "      --disabled-bg-color: #DDD;\n",
                "  }\n",
                "\n",
                "  [theme=dark] .colab-df-quickchart {\n",
                "      --bg-color: #3B4455;\n",
                "      --fill-color: #D2E3FC;\n",
                "      --hover-bg-color: #434B5C;\n",
                "      --hover-fill-color: #FFFFFF;\n",
                "      --disabled-bg-color: #3B4455;\n",
                "      --disabled-fill-color: #666;\n",
                "  }\n",
                "\n",
                "  .colab-df-quickchart {\n",
                "    background-color: var(--bg-color);\n",
                "    border: none;\n",
                "    border-radius: 50%;\n",
                "    cursor: pointer;\n",
                "    display: none;\n",
                "    fill: var(--fill-color);\n",
                "    height: 32px;\n",
                "    padding: 0;\n",
                "    width: 32px;\n",
                "  }\n",
                "\n",
                "  .colab-df-quickchart:hover {\n",
                "    background-color: var(--hover-bg-color);\n",
                "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
                "    fill: var(--button-hover-fill-color);\n",
                "  }\n",
                "\n",
                "  .colab-df-quickchart-complete:disabled,\n",
                "  .colab-df-quickchart-complete:disabled:hover {\n",
                "    background-color: var(--disabled-bg-color);\n",
                "    fill: var(--disabled-fill-color);\n",
                "    box-shadow: none;\n",
                "  }\n",
                "\n",
                "  .colab-df-spinner {\n",
                "    border: 2px solid var(--fill-color);\n",
                "    border-color: transparent;\n",
                "    border-bottom-color: var(--fill-color);\n",
                "    animation:\n",
                "      spin 1s steps(1) infinite;\n",
                "  }\n",
                "\n",
                "  @keyframes spin {\n",
                "    0% {\n",
                "      border-color: transparent;\n",
                "      border-bottom-color: var(--fill-color);\n",
                "      border-left-color: var(--fill-color);\n",
                "    }\n",
                "    20% {\n",
                "      border-color: transparent;\n",
                "      border-left-color: var(--fill-color);\n",
                "      border-top-color: var(--fill-color);\n",
                "    }\n",
                "    30% {\n",
                "      border-color: transparent;\n",
                "      border-left-color: var(--fill-color);\n",
                "      border-top-color: var(--fill-color);\n",
                "      border-right-color: var(--fill-color);\n",
                "    }\n",
                "    40% {\n",
                "      border-color: transparent;\n",
                "      border-right-color: var(--fill-color);\n",
                "      border-top-color: var(--fill-color);\n",
                "    }\n",
                "    60% {\n",
                "      border-color: transparent;\n",
                "      border-right-color: var(--fill-color);\n",
                "    }\n",
                "    80% {\n",
                "      border-color: transparent;\n",
                "      border-right-color: var(--fill-color);\n",
                "      border-bottom-color: var(--fill-color);\n",
                "    }\n",
                "    90% {\n",
                "      border-color: transparent;\n",
                "      border-bottom-color: var(--fill-color);\n",
                "    }\n",
                "  }\n",
                "</style>\n",
                "\n",
                "  <script>\n",
                "    async function quickchart(key) {\n",
                "      const quickchartButtonEl =\n",
                "        document.querySelector('#' + key + ' button');\n",
                "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
                "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
                "      try {\n",
                "        const charts = await google.colab.kernel.invokeFunction(\n",
                "            'suggestCharts', [key], {});\n",
                "      } catch (error) {\n",
                "        console.error('Error during call to suggestCharts:', error);\n",
                "      }\n",
                "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
                "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
                "    }\n",
                "    (() => {\n",
                "      let quickchartButtonEl =\n",
                "        document.querySelector('#df-f65d83a3-c83a-4169-a7b6-90f264e4d890 button');\n",
                "      quickchartButtonEl.style.display =\n",
                "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
                "    })();\n",
                "  </script>\n",
                "</div>\n",
                "\n",
                "  <div id=\"id_db8c73f1-7812-4518-8ec3-084803c7ea5c\">\n",
                "    <style>\n",
                "      .colab-df-generate {\n",
                "        background-color: #E8F0FE;\n",
                "        border: none;\n",
                "        border-radius: 50%;\n",
                "        cursor: pointer;\n",
                "        display: none;\n",
                "        fill: #1967D2;\n",
                "        height: 32px;\n",
                "        padding: 0 0 0 0;\n",
                "        width: 32px;\n",
                "      }\n",
                "\n",
                "      .colab-df-generate:hover {\n",
                "        background-color: #E2EBFA;\n",
                "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
                "        fill: #174EA6;\n",
                "      }\n",
                "\n",
                "      [theme=dark] .colab-df-generate {\n",
                "        background-color: #3B4455;\n",
                "        fill: #D2E3FC;\n",
                "      }\n",
                "\n",
                "      [theme=dark] .colab-df-generate:hover {\n",
                "        background-color: #434B5C;\n",
                "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
                "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
                "        fill: #FFFFFF;\n",
                "      }\n",
                "    </style>\n",
                "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sample_cov')\"\n",
                "            title=\"Generate code using this dataframe.\"\n",
                "            style=\"display:none;\">\n",
                "\n",
                "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
                "       width=\"24px\">\n",
                "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
                "  </svg>\n",
                "    </button>\n",
                "    <script>\n",
                "      (() => {\n",
                "      const buttonEl =\n",
                "        document.querySelector('#id_db8c73f1-7812-4518-8ec3-084803c7ea5c button.colab-df-generate');\n",
                "      buttonEl.style.display =\n",
                "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
                "\n",
                "      buttonEl.onclick = () => {\n",
                "        google.colab.notebook.generateWithVariable('sample_cov');\n",
                "      }\n",
                "      })();\n",
                "    </script>\n",
                "  </div>\n",
                "\n",
                "    </div>\n",
                "  </div>\n"
              ],
              "application/vnd.google.colaboratory.intrinsic+json": {
                "type": "dataframe",
                "variable_name": "sample_cov",
                "summary": "{\n  \"name\": \"sample_cov\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Ticker\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"SIRI\",\n          \"MSFT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MSFT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05142043954066209,\n        \"min\": 0.039452694843004794,\n        \"max\": 0.11217217782459488,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.039452694843004794,\n          0.11217217782459488\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SIRI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4163630091356102,\n        \"min\": 0.039452694843004794,\n        \"max\": 0.6282789092330576,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.6282789092330576,\n          0.039452694843004794\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
              }
            },
            "metadata": {},
            "execution_count": 9
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "from pickle import TRUE\n",
          "plotting.plot_covariance(sample_cov, plot_correlation=TRUE)"
        ],
        "metadata": {
          "id": "jCWBT_9EzQCf",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 505
          },
          "outputId": "3834ceba-59e6-42f6-e644-37a77b0ed1a2"
        },
        "execution_count": 10,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "<Axes: >"
              ]
            },
            "metadata": {},
            "execution_count": 10
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 2 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "markdown",
        "source": [
          "Ledoit Wolf"
        ],
        "metadata": {
          "id": "fis28bmOz9w4"
        }
      },
      {
        "cell_type": "code",
        "source": [
          "S = risk_models.CovarianceShrinkage(prices).ledoit_wolf()\n",
          "plotting.plot_covariance(S, plot_correlation=True)"
        ],
        "metadata": {
          "id": "R6e0TwxyzyoH",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 505
          },
          "outputId": "ffec4b0b-462a-4329-ee39-7c86a7de50e0"
        },
        "execution_count": 11,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "<Axes: >"
              ]
            },
            "metadata": {},
            "execution_count": 11
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 2 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "from pypfopt import expected_returns\n",
          "mu = expected_returns.capm_return(prices)\n",
          "mu"
        ],
        "metadata": {
          "id": "AbTBlUQR0qby",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 178
          },
          "outputId": "aaa828fb-d95f-43c5-ec42-a95e6aebfeaa"
        },
        "execution_count": 12,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "Ticker\n",
                "MSFT    0.123357\n",
                "SIRI    0.403990\n",
                "Name: mkt, dtype: float64"
              ],
              "text/html": [
                "<div>\n",
                "<style scoped>\n",
                "    .dataframe tbody tr th:only-of-type {\n",
                "        vertical-align: middle;\n",
                "    }\n",
                "\n",
                "    .dataframe tbody tr th {\n",
                "        vertical-align: top;\n",
                "    }\n",
                "\n",
                "    .dataframe thead th {\n",
                "        text-align: right;\n",
                "    }\n",
                "</style>\n",
                "<table border=\"1\" class=\"dataframe\">\n",
                "  <thead>\n",
                "    <tr style=\"text-align: right;\">\n",
                "      <th></th>\n",
                "      <th>mkt</th>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>Ticker</th>\n",
                "      <th></th>\n",
                "    </tr>\n",
                "  </thead>\n",
                "  <tbody>\n",
                "    <tr>\n",
                "      <th>MSFT</th>\n",
                "      <td>0.123357</td>\n",
                "    </tr>\n",
                "    <tr>\n",
                "      <th>SIRI</th>\n",
                "      <td>0.403990</td>\n",
                "    </tr>\n",
                "  </tbody>\n",
                "</table>\n",
                "</div><br><label><b>dtype:</b> float64</label>"
              ]
            },
            "metadata": {},
            "execution_count": 12
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "from pypfopt import EfficientFrontier"
        ],
        "metadata": {
          "id": "X-9qtWRK1cCy"
        },
        "execution_count": 13,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "S = risk_models.CovarianceShrinkage(prices).ledoit_wolf()\n",
          "ef = EfficientFrontier(None, S, weight_bounds=(-1, 1))\n",
          "ef.min_volatility()\n",
          "weights = ef.clean_weights()\n",
          "weights"
        ],
        "metadata": {
          "id": "A_uLPKoi18h7",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "92331635-09fe-49d3-95dd-d972ac46bb46"
        },
        "execution_count": 15,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "OrderedDict([('MSFT', 0.8386), ('SIRI', 0.1614)])"
              ]
            },
            "metadata": {},
            "execution_count": 15
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "pd.Series(weights).plot.bar(title=\"Optimal Portfolio\")"
        ],
        "metadata": {
          "id": "F6wB-nVF3Lkt",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 493
          },
          "outputId": "726da48f-c042-4521-efe1-c794a1adfbb8"
        },
        "execution_count": 16,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "<Axes: title={'center': 'Optimal Portfolio'}>"
              ]
            },
            "metadata": {},
            "execution_count": 16
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "ef.portfolio_performance(verbose=True)"
        ],
        "metadata": {
          "id": "0Zzm2T5N3baW",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "0d97edb7-7eaf-4db1-ff06-168a0a651a59"
        },
        "execution_count": 17,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Annual volatility: 32.1%\n"
            ]
          },
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "(None, 0.3210548077881102, None)"
              ]
            },
            "metadata": {},
            "execution_count": 17
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "mu = expected_returns.capm_return(prices)\n",
          "S = risk_models.CovarianceShrinkage(prices).ledoit_wolf()\n",
          "ef = EfficientFrontier(mu, S)\n",
          "ef.max_sharpe()\n",
          "weights = ef.clean_weights()\n",
          "weights"
        ],
        "metadata": {
          "id": "-RSm3R5t4C0v",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "6f49fd34-98c1-43a0-9d0d-b73cac55d953"
        },
        "execution_count": 18,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "OrderedDict([('MSFT', 0.47909), ('SIRI', 0.52091)])"
              ]
            },
            "metadata": {},
            "execution_count": 18
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [],
        "metadata": {
          "id": "ycrK-_wD5fPC"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "from pypfopt import objective_functions"
        ],
        "metadata": {
          "id": "LPY6jqo87QdG"
        },
        "execution_count": 19,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "ef = EfficientFrontier(mu, S, weight_bounds=(0, 1))\n",
          "ef.add_objective(objective_functions.L2_reg)\n",
          "ef.efficient_return(target_return=0.05, market_neutral=True)\n",
          "weights = ef.clean_weights()\n",
          "weights\n"
        ],
        "metadata": {
          "id": "ZtGVRdmE6KX6",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "5ada619d-4f4a-4509-e99d-1b9d6d5b664f"
        },
        "execution_count": 32,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stderr",
            "text": [
              "/usr/local/lib/python3.10/dist-packages/pypfopt/efficient_frontier/efficient_frontier.py:172: RuntimeWarning: Market neutrality requires shorting - bounds have been amended\n",
              "  warnings.warn(\n"
            ]
          },
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "OrderedDict([('MSFT', -0.17817), ('SIRI', 0.17817)])"
              ]
            },
            "metadata": {},
            "execution_count": 32
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "ef.portfolio_performance(verbose=True)"
        ],
        "metadata": {
          "id": "DikNPqOM7xdt",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "e0c4ce61-4350-4c0f-b58c-6ca4bd7c061b"
        },
        "execution_count": 22,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Expected annual return: 5.0%\n",
              "Annual volatility: 13.1%\n",
              "Sharpe Ratio: 0.23\n"
            ]
          },
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "(0.04999999999999999, 0.1310806152870628, 0.2288667926550455)"
              ]
            },
            "metadata": {},
            "execution_count": 22
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "pd.Series(weights).plot.bar(title=\"Optimal Portfolio\")"
        ],
        "metadata": {
          "id": "QPBSTRR-8bC-",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 493
          },
          "outputId": "c7d058f8-215b-47b1-db61-0c9ff99134a9"
        },
        "execution_count": 23,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "<Axes: title={'center': 'Optimal Portfolio'}>"
              ]
            },
            "metadata": {},
            "execution_count": 23
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 1 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "semicov = risk_models.semicovariance(prices, benchmark=0)\n",
          "plotting.plot_covariance(semicov)"
        ],
        "metadata": {
          "id": "4KJ_w8y39vlB",
          "colab": {
            "base_uri": "https://localhost:8080/",
            "height": 504
          },
          "outputId": "1ced6969-86ea-4b6b-fdab-136ca0d89fd4"
        },
        "execution_count": 24,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "<Axes: >"
              ]
            },
            "metadata": {},
            "execution_count": 24
          },
          {
            "output_type": "display_data",
            "data": {
              "text/plain": [
                "<Figure size 640x480 with 2 Axes>"
              ],
              "image/png": "\n"
            },
            "metadata": {}
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "ef = EfficientFrontier(mu, semicov)\n",
          "ef.efficient_return(0.2)\n",
          "weights = ef.clean_weights()\n",
          "weights"
        ],
        "metadata": {
          "id": "ru_LccCs-ZKq",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "1f783b56-1de2-4ec0-a366-7086a29f0e1f"
        },
        "execution_count": 25,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "OrderedDict([('MSFT', 0.72689), ('SIRI', 0.27311)])"
              ]
            },
            "metadata": {},
            "execution_count": 25
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "ef.portfolio_performance(verbose=True)"
        ],
        "metadata": {
          "id": "7o9_NAtg-20D",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "622e24af-918f-4a0e-f5a3-bbe358bfd01c"
        },
        "execution_count": 26,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Expected annual return: 20.0%\n",
              "Annual volatility: 23.0%\n",
              "Sharpe Ratio: 0.78\n"
            ]
          },
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "(0.2000000000000001, 0.23021313568791202, 0.781884141676506)"
              ]
            },
            "metadata": {},
            "execution_count": 26
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "from pypfopt import EfficientSemivariance"
        ],
        "metadata": {
          "id": "GkGhKkmK_dsE"
        },
        "execution_count": 27,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "returns = expected_returns.returns_from_prices(prices)\n",
          "returns = returns.dropna()"
        ],
        "metadata": {
          "id": "fcFuD4t0AGCM"
        },
        "execution_count": 28,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "ef = EfficientSemivariance(mu, returns)\n",
          "ef.efficient_return(0.2)\n",
          "weights = ef.clean_weights()\n",
          "weights"
        ],
        "metadata": {
          "id": "LwQdG3lJ_pos",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "aed07692-20df-4121-89f7-3eff4eb1cb2c"
        },
        "execution_count": 29,
        "outputs": [
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "OrderedDict([('MSFT', 0.72689), ('SIRI', 0.27311)])"
              ]
            },
            "metadata": {},
            "execution_count": 29
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "ef.portfolio_performance(verbose=True)"
        ],
        "metadata": {
          "id": "YDJAT7tg_7ps",
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "outputId": "095117fb-8116-4416-8ff6-f4ed5e760999"
        },
        "execution_count": 30,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Expected annual return: 20.0%\n",
              "Annual semi-deviation: 22.2%\n",
              "Sortino Ratio: 0.81\n"
            ]
          },
          {
            "output_type": "execute_result",
            "data": {
              "text/plain": [
                "(0.20000118119459304, 0.2218263865698994, 0.8114507204393069)"
              ]
            },
            "metadata": {},
            "execution_count": 30
          }
        ]
      }
    ]
  }