{
    "cells": [
      {
        "cell_type": "markdown",
        "metadata": {
          "_cell_guid": "83708667-4fdc-1563-7b3a-06b6575d2865",
          "id": "jS1Wk4T0yobq"
        },
        "source": [
          "\n",
          "\n",
          "# Fraud Detection\n",
          "The goal is to use various classification-based models to detect whether a transaction is a normal payment or a fraud.\n"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "lX3b80KAyobr"
        },
        "source": [
          "## Content"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "51c5HyUdyobs"
        },
        "source": [
          "* [1. Problem Definition](#0)\n",
          "* [2. Getting Started - Load Libraries and Dataset](#1)\n",
          "    * [2.1. Load Libraries](#1.1)    \n",
          "    * [2.2. Load Dataset](#1.2)\n",
          "* [3. Exploratory Data Analysis](#2)\n",
          "    * [3.1 Descriptive Statistics](#2.1)    \n",
          "    * [3.2. Data Visualisation](#2.2)\n",
          "* [4. Data Preparation](#3)\n",
          "    * [4.1 Data Cleaning](#3.1)    \n",
          "    * [4.2.Feature Selection](#3.2)\n",
          "* [5.Evaluate Algorithms and Models](#4)        \n",
          "    * [5.1. Train/Test Split](#4.1)\n",
          "    * [5.2. Evaluate Models](#4.2)\n"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "lC_IvYrsyobt"
        },
        "source": [
          "<a id='0'></a>\n",
          "# 1. Problem Definition"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "-y4mQAfIyobu"
        },
        "source": [
          "In the classification framework defined for this case study, the response variable takes\n",
          "a value of 1 in case the given transaction is fraud and 0 otherwise.\n",
          "\n",
          "The datasets contains transactions made by credit cards in September 2013 by european cardholders. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise."
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "mRZzvcFByobu"
        },
        "source": [
          "<a id='1'></a>\n",
          "# 2. Getting Started- Loading the data and python packages"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "0YFet58Pyobv"
        },
        "source": [
          "<a id='1.1'></a>\n",
          "## 2.1. Loading the python packages"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "_cell_guid": "5d8fee34-f454-2642-8b06-ed719f0317e1",
          "id": "kVyFDSx9yobv"
        },
        "outputs": [],
        "source": [
          "# Load libraries\n",
          "import numpy as np\n",
          "import pandas as pd\n",
          "from matplotlib import pyplot\n",
          "from pandas import read_csv, set_option\n",
          "from pandas.plotting import scatter_matrix\n",
          "import seaborn as sns\n",
          "from sklearn.preprocessing import StandardScaler\n",
          "from sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV\n",
          "from sklearn.linear_model import LogisticRegression\n",
          "from sklearn.tree import DecisionTreeClassifier\n",
          "from sklearn.neighbors import KNeighborsClassifier\n",
          "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
          "from sklearn.naive_bayes import GaussianNB\n",
          "from sklearn.svm import SVC\n",
          "from sklearn.neural_network import MLPClassifier\n",
          "from sklearn.pipeline import Pipeline\n",
          "from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, RandomForestClassifier, ExtraTreesClassifier\n",
          "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "6Xf5EzxWyobw"
        },
        "source": [
          "<a id='1.2'></a>\n",
          "## 2.2. Loading the Data"
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "# load dataset\n",
          "from google.colab import drive\n",
          "drive.mount('/content/drive')"
        ],
        "metadata": {
          "colab": {
            "base_uri": "https://localhost:8080/"
          },
          "id": "1jaauEPDb0Vn",
          "outputId": "4fcf3470-8671-4f7b-b55d-fd7c31fe8ddf"
        },
        "execution_count": null,
        "outputs": [
          {
            "output_type": "stream",
            "name": "stdout",
            "text": [
              "Mounted at /content/drive\n"
            ]
          }
        ]
      },
      {
        "cell_type": "code",
        "source": [
          "from google.colab import files"
        ],
        "metadata": {
          "id": "WSeLM8QucISJ"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "source": [
          "import io\n",
          "uploaded = files.upload()\n",
          "dataset = pd.read_csv(io.BytesIO(uploaded['creditcard_sample.csv']))"
        ],
        "metadata": {
          "id": "gXG3AjIjhEK4"
        },
        "execution_count": null,
        "outputs": []
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "LwsmoX-fyoby"
        },
        "outputs": [],
        "source": [
          "#Diable the warnings\n",
          "import warnings\n",
          "warnings.filterwarnings('ignore')"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "_cell_guid": "df6a4523-b385-69ee-c933-592826d81431",
          "id": "BhVLQKBByoby"
        },
        "source": [
          "<a id='2'></a>\n",
          "# 3. Exploratory Data Analysis"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "3CyxBAwryobz"
        },
        "source": [
          "<a id='2.1'></a>\n",
          "## 3.1. Descriptive Statistics"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "_cell_guid": "52f85dc2-0f91-3c50-400e-ddc38bea966b",
          "id": "L7n9ME5Wyobz"
        },
        "outputs": [],
        "source": [
          "# shape\n",
          "dataset.shape"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "NNUSv2zryobz"
        },
        "outputs": [],
        "source": [
          "# peek at data\n",
          "set_option('display.width', 100)\n",
          "dataset.head(5)"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "_cell_guid": "f36dd804-0c16-f0c9-05c9-d22b85a79e75",
          "id": "5MqBB7Cxyob0"
        },
        "outputs": [],
        "source": [
          "# types\n",
          "set_option('display.max_rows', 500)\n",
          "dataset.dtypes"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "_cell_guid": "7bffeec0-5bbc-fffb-18f2-3da56b862ca3",
          "id": "6Md6InWRyob0"
        },
        "outputs": [],
        "source": [
          "# describe data\n",
          "#set_option('precision', 3)\n",
          "pd.set_option(\"display.max_columns\", 100)\n",
          "dataset.describe()\n"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "khN_PO6Vyob1"
        },
        "outputs": [],
        "source": [
          "class_names = {0:'Not Fraud', 1:'Fraud'}\n",
          "print(dataset.Class.value_counts().rename(index = class_names))"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "OEthV_kZyob1"
        },
        "source": [
          "<a id='2.2'></a>\n",
          "## 3.2. Data Visualization"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "vVPYNSWDyob2"
        },
        "outputs": [],
        "source": [
          "# histograms\n",
          "dataset.hist(sharex=False, sharey=False, xlabelsize=1, ylabelsize=1, figsize=(12,12))\n",
          "pyplot.show()"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "PrCr4SgPyob2"
        },
        "source": [
          "<a id='3'></a>\n",
          "## 4. Data Preparation"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "luxog3Axyob2"
        },
        "outputs": [],
        "source": [
          "#Checking for any null values and removing the null values'''\n",
          "print('Null Values =',dataset.isnull().values.any())"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "1LKyCwVSyob3"
        },
        "source": [
          "<a id='3.2'></a>\n",
          "## 4.2. Feature Selection\n",
          "\n",
          "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.chi2.html <br>\n",
          "https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectKBest.html"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "0iMH40Pbyob3"
        },
        "outputs": [],
        "source": [
          "#\n",
          "#\n",
          "#\n",
          "bestfeatures\n",
          "Y= dataset[\"Class\"]\n",
          "X = dataset.loc[:, dataset.columns != 'Class']\n",
          "fit = bestfeatures.fit(X,Y)\n",
          "dfscores = pd.DataFrame(fit.scores_)\n",
          "dfcolumns = pd.DataFrame(X.columns)\n",
          "#concat two dataframes for better visualization\n",
          "featureScores = pd.concat([dfcolumns,dfscores],axis=1)\n",
          "featureScores.columns = ['Specs','Score']\n",
          "print(featureScores.nlargest(XX,'Score'))"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "zhWq6D1Nyob3"
        },
        "source": [
          "<a id='4'></a>\n",
          "# 5. Evaluate Algorithms and Models"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "4I_wFyudyob4"
        },
        "source": [
          "<a id='4.1'></a>\n",
          "## 5.1. Train Test Split and Evaluation Metrics"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "gTFzvdzQyob4"
        },
        "outputs": [],
        "source": [
          "# split out validation dataset for the end\n",
          "Y= dataset[\"Class\"]\n",
          "X = dataset.loc[:, dataset.columns != 'Class']\n",
          "validation_size =\n",
          "seed =\n",
          "X_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size=validation_size, random_state=seed)\n",
          "scoring = 'accuracy'"
        ]
      },
      {
        "cell_type": "markdown",
        "metadata": {
          "id": "8YXNHGywyob4"
        },
        "source": [
          "<a id='4.2'></a>\n",
          "## 5.2. Checking Models and Algorithms\n",
          "1-\n",
          "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html <br>\n",
          "2-\n",
          "https://scikit-learn.org/stable/modules/cross_validation.html<br>\n",
          "3-\n",
          "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression <br>\n",
          "4-\n",
          "https://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html#sklearn.discriminant_analysis.LinearDiscriminantAnalysis <br>\n",
          "5-\n",
          "https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html <br>\n",
          "6-\n",
          "https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html<br>\n"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "Qk4K_Ztxyob4"
        },
        "outputs": [],
        "source": [
          "# test options for classification\n",
          "num_folds =\n",
          "seed ="
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "nqVse4uCyob5"
        },
        "outputs": [],
        "source": [
          "models = []\n",
          "models.append(('LR', LogisticRegression()))\n",
          "models.append(('LDA', LinearDiscriminantAnalysis()))\n",
          "models.append(('KNN', KNeighborsClassifier()))\n",
          "models.append(('CART', DecisionTreeClassifier()))"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "QVvziCGFyob5"
        },
        "outputs": [],
        "source": [
          "results = []\n",
          "names = []\n",
          "for name, model in models:\n",
          "    kfold = KFold(n_splits=num_folds, random_state=seed, shuffle=True)\n",
          "    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)\n",
          "    results.append(cv_results)\n",
          "    names.append(name)\n",
          "    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n",
          "    print(msg)"
        ]
      },
      {
        "cell_type": "markdown",
        "source": [
          "**Model 01**"
        ],
        "metadata": {
          "id": "bzbbVh7z1Lue"
        }
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "iiJHIw7Gyob6"
        },
        "outputs": [],
        "source": [
          "model1 = DecisionTreeClassifier()\n",
          "model1.fit(X_train, Y_train)"
        ]
      },
      {
        "cell_type": "code",
        "execution_count": null,
        "metadata": {
          "id": "UX8v11sCyob6"
        },
        "outputs": [],
        "source": [
          "rescaledValidationX = X_validation\n",
          "predictions = model1.predict(rescaledValidationX)\n",
          "print(XXX(Y_validation, predictions))\n",
          "print(XXX(Y_validation, predictions))\n",
          "print(classification_report(Y_validation, predictions))"
        ]
      },
      {
        "cell_type": "markdown",
        "source": [
          "**Model 02**"
        ],
        "metadata": {
          "id": "IrHmeue40lzF"
        }
      },
      {
        "cell_type": "markdown",
        "source": [
          "**Model 03**"
        ],
        "metadata": {
          "id": "8aE4y13p07Y5"
        }
      },
      {
        "cell_type": "markdown",
        "source": [
          "**Model 04**"
        ],
        "metadata": {
          "id": "CojKhJ0y1IHB"
        }
      },
      {
        "cell_type": "markdown",
        "source": [
          "#END"
        ],
        "metadata": {
          "id": "l0OeI_L4W0UO"
        }
      }
    ],
    "metadata": {
      "_change_revision": 206,
      "_is_fork": false,
      "kernelspec": {
        "display_name": "Python 3",
        "language": "python",
        "name": "python3"
      },
      "language_info": {
        "codemirror_mode": {
          "name": "ipython",
          "version": 3
        },
        "file_extension": ".py",
        "mimetype": "text/x-python",
        "name": "python",
        "nbconvert_exporter": "python",
        "pygments_lexer": "ipython3",
        "version": "3.7.3"
      },
      "colab": {
        "provenance": []
      },
      "accelerator": "GPU",
      "gpuClass": "standard"
    },
    "nbformat": 4,
    "nbformat_minor": 0
  }